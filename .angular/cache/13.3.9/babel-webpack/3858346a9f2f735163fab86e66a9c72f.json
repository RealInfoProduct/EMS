{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nconst _c0 = [\"rb\"];\n\nconst _c1 = function (a1, a2, a3) {\n  return {\n    \"p-radiobutton-label\": true,\n    \"p-radiobutton-label-active\": a1,\n    \"p-disabled\": a2,\n    \"p-radiobutton-label-focus\": a3\n  };\n};\n\nfunction RadioButton_label_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"label\", 4);\n    i0.ɵɵlistener(\"click\", function RadioButton_label_6_Template_label_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.select($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n\n    const _r0 = i0.ɵɵreference(3);\n\n    i0.ɵɵclassMap(ctx_r1.labelStyleClass);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(5, _c1, _r0.checked, ctx_r1.disabled, ctx_r1.focused));\n    i0.ɵɵattribute(\"for\", ctx_r1.inputId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.label);\n  }\n}\n\nconst _c2 = function (a1, a2, a3) {\n  return {\n    \"p-radiobutton p-component\": true,\n    \"p-radiobutton-checked\": a1,\n    \"p-radiobutton-disabled\": a2,\n    \"p-radiobutton-focused\": a3\n  };\n};\n\nconst _c3 = function (a1, a2, a3) {\n  return {\n    \"p-radiobutton-box\": true,\n    \"p-highlight\": a1,\n    \"p-disabled\": a2,\n    \"p-focus\": a3\n  };\n};\n\nconst RADIO_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioButton),\n  multi: true\n};\nlet RadioControlRegistry = /*#__PURE__*/(() => {\n  class RadioControlRegistry {\n    constructor() {\n      this.accessors = [];\n    }\n\n    add(control, accessor) {\n      this.accessors.push([control, accessor]);\n    }\n\n    remove(accessor) {\n      this.accessors = this.accessors.filter(c => {\n        return c[1] !== accessor;\n      });\n    }\n\n    select(accessor) {\n      this.accessors.forEach(c => {\n        if (this.isSameGroup(c, accessor) && c[1] !== accessor) {\n          c[1].writeValue(accessor.value);\n        }\n      });\n    }\n\n    isSameGroup(controlPair, accessor) {\n      if (!controlPair[0].control) {\n        return false;\n      }\n\n      return controlPair[0].control.root === accessor.control.control.root && controlPair[1].name === accessor.name;\n    }\n\n  }\n\n  RadioControlRegistry.ɵfac = function RadioControlRegistry_Factory(t) {\n    return new (t || RadioControlRegistry)();\n  };\n\n  RadioControlRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: RadioControlRegistry,\n    factory: RadioControlRegistry.ɵfac,\n    providedIn: 'root'\n  });\n  return RadioControlRegistry;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet RadioButton = /*#__PURE__*/(() => {\n  class RadioButton {\n    constructor(cd, injector, registry) {\n      this.cd = cd;\n      this.injector = injector;\n      this.registry = registry;\n      this.onClick = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n\n      this.onModelChange = () => {};\n\n      this.onModelTouched = () => {};\n    }\n\n    ngOnInit() {\n      this.control = this.injector.get(NgControl);\n      this.checkName();\n      this.registry.add(this.control, this);\n    }\n\n    handleClick(event, radioButton, focus) {\n      event.preventDefault();\n\n      if (this.disabled) {\n        return;\n      }\n\n      this.select(event);\n\n      if (focus) {\n        radioButton.focus();\n      }\n    }\n\n    select(event) {\n      if (!this.disabled) {\n        this.inputViewChild.nativeElement.checked = true;\n        this.checked = true;\n        this.onModelChange(this.value);\n        this.registry.select(this);\n        this.onClick.emit(event);\n      }\n    }\n\n    writeValue(value) {\n      this.checked = value == this.value;\n\n      if (this.inputViewChild && this.inputViewChild.nativeElement) {\n        this.inputViewChild.nativeElement.checked = this.checked;\n      }\n\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n\n    onInputFocus(event) {\n      this.focused = true;\n      this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n      this.focused = false;\n      this.onModelTouched();\n      this.onBlur.emit(event);\n    }\n\n    onChange(event) {\n      this.select(event);\n    }\n\n    focus() {\n      this.inputViewChild.nativeElement.focus();\n    }\n\n    ngOnDestroy() {\n      this.registry.remove(this);\n    }\n\n    checkName() {\n      if (this.name && this.formControlName && this.name !== this.formControlName) {\n        this.throwNameError();\n      }\n\n      if (!this.name && this.formControlName) {\n        this.name = this.formControlName;\n      }\n    }\n\n    throwNameError() {\n      throw new Error(`\n          If you define both a name and a formControlName attribute on your radio button, their values\n          must match. Ex: <p-radioButton formControlName=\"food\" name=\"food\"></p-radioButton>\n        `);\n    }\n\n  }\n\n  RadioButton.ɵfac = function RadioButton_Factory(t) {\n    return new (t || RadioButton)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(RadioControlRegistry));\n  };\n\n  RadioButton.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RadioButton,\n    selectors: [[\"p-radioButton\"]],\n    viewQuery: function RadioButton_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      value: \"value\",\n      formControlName: \"formControlName\",\n      name: \"name\",\n      disabled: \"disabled\",\n      label: \"label\",\n      tabindex: \"tabindex\",\n      inputId: \"inputId\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      ariaLabel: \"ariaLabel\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      labelStyleClass: \"labelStyleClass\"\n    },\n    outputs: {\n      onClick: \"onClick\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\"\n    },\n    features: [i0.ɵɵProvidersFeature([RADIO_VALUE_ACCESSOR])],\n    decls: 7,\n    vars: 23,\n    consts: [[3, \"ngStyle\", \"ngClass\"], [1, \"p-hidden-accessible\"], [\"type\", \"radio\", 3, \"checked\", \"disabled\", \"change\", \"focus\", \"blur\"], [\"rb\", \"\"], [3, \"ngClass\", \"click\"], [1, \"p-radiobutton-icon\"], [3, \"class\", \"ngClass\", \"click\", 4, \"ngIf\"]],\n    template: function RadioButton_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r4 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"input\", 2, 3);\n        i0.ɵɵlistener(\"change\", function RadioButton_Template_input_change_2_listener($event) {\n          return ctx.onChange($event);\n        })(\"focus\", function RadioButton_Template_input_focus_2_listener($event) {\n          return ctx.onInputFocus($event);\n        })(\"blur\", function RadioButton_Template_input_blur_2_listener($event) {\n          return ctx.onInputBlur($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵlistener(\"click\", function RadioButton_Template_div_click_4_listener($event) {\n          i0.ɵɵrestoreView(_r4);\n\n          const _r0 = i0.ɵɵreference(3);\n\n          return ctx.handleClick($event, _r0, true);\n        });\n        i0.ɵɵelement(5, \"span\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(6, RadioButton_label_6_Template, 2, 9, \"label\", 6);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction3(15, _c2, ctx.checked, ctx.disabled, ctx.focused));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"id\", ctx.inputId)(\"name\", ctx.name)(\"value\", ctx.value)(\"tabindex\", ctx.tabindex)(\"aria-checked\", ctx.checked)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledBy);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(19, _c3, ctx.checked, ctx.disabled, ctx.focused));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.label);\n      }\n    },\n    directives: [i1.NgStyle, i1.NgClass, i1.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return RadioButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet RadioButtonModule = /*#__PURE__*/(() => {\n  class RadioButtonModule {}\n\n  RadioButtonModule.ɵfac = function RadioButtonModule_Factory(t) {\n    return new (t || RadioButtonModule)();\n  };\n\n  RadioButtonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RadioButtonModule\n  });\n  RadioButtonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return RadioButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RADIO_VALUE_ACCESSOR, RadioButton, RadioButtonModule, RadioControlRegistry }; //# sourceMappingURL=primeng-radiobutton.mjs.map","map":null,"metadata":{},"sourceType":"module"}